If you have grasped the essence of recursion, then you would see the simplicity of the whole idea when you solve this problem. All those who have done Maths-2, or are doing Maths-2, should be able to appreciate this problem. If you are yet to do Maths-2, you can still try to attempt this problem. But we request learners not to be intimidated by the heavy use of notation. Feel free to skip if this problem if it is perceived to be too hard.

Any square matrix 
M
M has a number associated with it called its determinant. The determinant of a 
2
×
2
2×2 matrix is defined as follows:

det
(
[
a
b
c
d
]
)
=
a
d
−
b
c
det([ 
a
c
​
  
b
d
​
 ])=ad−bc
For any 
n
×
n
n×n square matrix 
M
M, its determinant is defined recursively as follows:

det
(
M
)
=
∑
j
=
0
n
−
1
(
−
1
)
j
⋅
M
[
0
]
[
j
]
⋅
M
j
det(M)=∑ 
j=0
n−1
​
 (−1) 
j
 ⋅M[0][j]⋅M 
j
​
 
Here, 
M
j
M 
j
​
  is the determinant of the matrix obtained by removing the 
0
t
h
0 
th
  row and the 
j
t
h
j 
th
  column of 
M
M and 
0
≤
j
<
n
0≤j<n. Here, we have used zero-based indexing.

For example, for a 
3
×
3
3×3 matrix, we have:

det
(
[
a
b
c
d
e
f
g
h
i
]
)
=
 
(
−
1
)
1
+
1
⋅
a
⋅
det
(
[
e
f
h
i
]
)
+
(
−
1
)
1
+
2
⋅
b
⋅
det
(
[
d
f
g
i
]
)
+
(
−
1
)
1
+
3
⋅
c
⋅
det
(
[
d
e
g
h
]
)
det 
​
  
​
  
a
d
g
​
  
b
e
h
​
  
c
f
i
​
  
​
  
​
 = 
​
  
(−1) 
1+1
 ⋅a⋅det([ 
e
h
​
  
f
i
​
 ])+
(−1) 
1+2
 ⋅b⋅det([ 
d
g
​
  
f
i
​
 ])+
(−1) 
1+3
 ⋅c⋅det([ 
d
g
​
  
e
h
​
 ])
​
 
Write a recursive function named det that accepts a square matrix as argument and returns its determinant. In the process of writing this function, it would be useful to look into GrPA-3 of week-7. A good approach would be to write two functions: det and minor_matrix.

You do not have to accept input from the user or print the output to the console. You just have to write the function definition
